let input =[
    "ULUULLUULUUUUDURUUULLDLDDRDRDULULRULLRLULRUDRRLDDLRULLLDRDRRDDLLLLDURUURDUDUUURDRLRLLURUDRDULURRUDLRDRRLLRDULLDURURLLLULLRLUDDLRRURRLDULRDDULDLRLURDUDRLLRUDDRLRDLLDDUURLRUDDURRLRURLDDDURRDLLDUUDLLLDUDURLUDURLRDLURURRLRLDDRURRLRRDURLURURRRULRRDLDDDDLLRDLDDDRDDRLUUDDLDUURUULDLUULUURRDRLDDDULRRRRULULLRLLDDUDRLRRLLLLLDRULURLLDULULLUULDDRURUDULDRDRRURLDRDDLULRDDRDLRLUDLLLDUDULUUUUDRDRURDDULLRDRLRRURLRDLRRRRUDDLRDDUDLDLUUDLDDRRRDRLLRLUURUDRUUULUDDDLDUULULLRUDULULLLDRLDDLLUUDRDDDDRUDURDRRUUDDLRRRRURLURLD",
    "LDLUDDLLDDRLLDLDRDDDDDUURUDDDUURLRLRLDULLLDLUDDDULLDUDLRUUDDLUULLDRLDDUDLUDDLURRRLDUURDDRULLURLLRLLUUDRLDDDLDLDRDUDLRDURULDLDRRDRLDLUURRRRLUDDULDULUUUDULDDRLLDDRRUULURRUURRLDUUUDDDDRUURUDRRRDDDDLRLURRRRUUDDDULRRURRDLULRURDDRDRLUDLURDDRDURRUURDUDUDRRDDURRRDURDLUUUURRUDULLDDRLLLURLDUDRRLDDLULUDUDDDDUDLUUULUURUDRURUUDUUURRLDUUDRDRURLLDLLLLLRLLUDURDRRLULRRDDDRLDRDDURLRDULULLDDURURLRRDRULDULUUUURLDURUDUDUDDLUDRRDURULRDULLLDRRDLDLUDURDULULLDDURDDUDRUUUDUDRLDUURDUUUDUURURUDRULRURLDLRDDURDLUU",
    "DDLDRLLDRRDRRLLUUURDDULRDUDRDRUDULURLLDDLRRRUDRDLDLURRRULUDRDLULLULLDUUDRLRUDDLRRURRUULRLDLLLDLRLLLURLLLURLLRDDLULLDUURLURDLLDLDUDLDRUUUDDLLDRRRRRUDRURUURRRDRUURDRDDRLDUUULUDUDRUDLLLLDRDRURRRDUUURLDLRLRDDDRLUDULDRLLULRDLDURDLDURUUDDULLULRDDRLRUURLLLURDRUURUUDUUULRDUDDRDURRRDUUDRRRUDRDLRURDLLDDDURLLRRDDDDLDULULDRLDRULDDLRRRLUDLLLLUDURRRUURUUULRRLDUURDLURRLRLLRDLRDDRDDLRDLULRUUUDDDUDRRURDDURURDDUDLURUUURUUUUDURDDLDRDULDRLDRLLRLRRRLDRLLDDRDLDLUDDLUDLULDLLDRDLLRDULDUDDULRRRUUDULDULRRURLRDRUDLDUDLURRRDDULRDDRULDLUUDDLRDUURDRDR",
    "URDURRRRUURULDLRUUDURDLLDUULULDURUDULLUDULRUDUUURLDRRULRRLLRDUURDDDLRDDRULUUURRRRDLLDLRLRULDLRRRRUDULDDURDLDUUULDURLLUDLURULLURRRDRLLDRRDULUDDURLDULLDURLUDUULRRLLURURLDLLLURDUDRLDDDRDULLUDDRLDDRRRLDULLLLDUURULUDDDURUULUUUDURUDURDURULLLDRULULDRRLDRLDLRLRUDUDURRLURLRUUDRRDULULDLLDRDRRRDUDUURLDULLLURRDLUDDLDDRDDUDLDDRRRUDRULLURDDULRLDUDDDRULURLLUDLLRLRRDRDRRURUUUURDLUURRDULLRDLDLRDDRDRLLLRRDDLDDDDLUDLRLULRRDDRDLDLUUUDLDURURLULLLDDDULURLRRURLDDRDDLD",
    "UDUULLRLUDLLUULRURRUUDDLLLDUURRURURDDRDLRRURLLRURLDDDRRDDUDRLLDRRUDRDRDDRURLULDDLDLRRUDDULLRLDDLRURLUURUURURDLDUDRLUUURRRLUURUDUDUUDDLDULUULRLDLLURLDRUDRLLRULURDLDDLLULLDRRUUDDLRRRUDDLRDRRRULDRDDRRULLLUDRUULURDUDRDLRRLDLRLRLDDULRRLULUUDDULDUDDULRRURLRDRDURUDDDLLRLDRDRULDDLLRLLRDUDDDDDDRLRLLDURUULDUUUDRURRLLRLDDDDRDRDUURRURDRDLLLUDDRDRRRDLUDLUUDRULURDLLLLLRDUDLLRULUULRLULRURULRLRRULUURLUDLDLLUURDLLULLLDDLRUDDRULRDLULRUURLDRULRRLULRLRULRDLURLLRURULRDRDLRRLRRDRUUURURULLLDDUURLDUDLLRRLRLRULLDUUUULDDUUU"
];

let isPart2 = false;

const KEYPAD = [
    [1,2,3],
    [4,5,6],
    [7,8,9],
];

const KEYPAD2 = [
    [0, 0, 1, 0, 0],
    [0, 2, 3, 4, 0],
    [5, 6, 7, 8, 9],
    [0, "A", "B", "C", 0],
    [0, 0, "D", 0, 0],
];

const isOutside = (pos) => {
    if (isPart2) {
        if(KEYPAD2[pos.y] === undefined || KEYPAD2[pos.y][pos.x] === undefined) {
            return true;
        }
        return KEYPAD2[pos.y][pos.x] === 0;
    }
    return KEYPAD[pos.y] === undefined || KEYPAD[pos.y][pos.x] === undefined;
}

const up = (pos) => {
    const newPos = {x: pos.x, y: pos.y - 1};
    if (isOutside(newPos)) {
        return pos;
    }
    return newPos;
}

const down = (pos) => {
    const newPos = {x: pos.x, y: pos.y + 1};
    if (isOutside(newPos)) {
        return pos;
    }
    return newPos;
}

const left = (pos) => {
    const newPos = {x: pos.x - 1, y: pos.y};
    if (isOutside(newPos)) {
        return pos;
    }
    return newPos;
}

const right = (pos) => {
    const newPos = {x: pos.x + 1, y: pos.y};
    if (isOutside(newPos)) {
        return pos;
    }
    return newPos;
}

const number = (pos) => {
    if (isPart2) {
        return KEYPAD2[pos.y][pos.x];
    }
    return KEYPAD[pos.y][pos.x];
}

const position = (number) => {
    let result;
    KEYPAD.forEach((row, index) => {
        row.forEach((value, idx) => {
            if (value === number) {
                result = { x: idx, y: index };
            }
        });
    });
    return result;
}

const move = (cmd, pos) => {
    if (cmd === "U") {
        return up(pos);
    }
    if (cmd === "D") {
        return down(pos);
    }
    if (cmd === "L") {
        return left(pos);
    }
    if (cmd === "R") {
        return right(pos);
    }
    return pos;
}

const parse = (inputLine, pos = position(5)) => {
    const cmd = inputLine.charAt(0);
    const newPos = move(cmd, pos);
    if (inputLine.length === 1) {
        return number(newPos);
    }
    return parse(inputLine.substr(1), newPos);
}

const part1 = () => {
    isPart2 = false;
    console.log(input.map((inputLine) => parse(inputLine)).join(''));
}
const part2 = () => {
    isPart2 = true;
    console.log(input.map((inputLine) => parse(inputLine)).join(''));
}

part1();
part2();